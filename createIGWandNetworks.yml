---
- hosts: localhost  # put localhost.  We are processing against aws
  connection: local  # put local.  We are processing against aws
  gather_facts: False  # don't gather facts against localhost
  tasks:  
  - name: create ec2 vpc internet gateway 
    ec2_vpc_igw:
      region: "{{ region }}"
      vpc_id: "{{ vpc_id }}"
      state: "{{ state }}"
      tags:
        Name: "{{ igw_name }}"
    register: igw

  - name: Lookup route tables
    ec2_vpc_route_table_info:
      region: "{{ region }}"
      filters:
        vpc-id: "{{ vpc_id }}"
    register: vpc_route_tables

  - name: Setup route tables
    ec2_vpc_route_table:
      region: "{{ region }}"
      vpc_id: "{{ vpc_id }}"
      lookup: id
      purge_subnets: false
      route_table_id: "{{ vpc_route_tables.route_tables[0].id }}"
      routes:
        - dest: 0.0.0.0/0
          gateway_id: "{{ igw.gateway_id }}"

  - name: associate subnet1 to the VPC
    ec2_vpc_subnet:
      region: "{{ region }}"
      vpc_id: "{{ vpc_id }}"
      state: "{{ state }}"
      cidr: "{{ subnet_cidr1 }}"
      map_public: yes
      resource_tags:
        Name: "{{ subnet_name1 }}"
    register: sn1

  - name: Set subnet1 in variable
    set_stats:
      data:
        subnet1: "{{ sn1 }}"
        
  - name: associate subnet2 to the VPC
    ec2_vpc_subnet:
      region: "{{ region }}"
      vpc_id: "{{ vpc_id }}"
      state: "{{ state }}"
      cidr: "{{ subnet_cidr2 }}"
      map_public: yes
      resource_tags:
        Name: "{{ subnet_name2 }}"
    register: sn2

  - name: Set subnet2 in variable
    set_stats:
      data:
        subnet2: "{{ sn2 }}"

  - name: associate subnet3 to the VPC
    ec2_vpc_subnet:
      region: "{{ region }}"
      vpc_id: "{{ vpc_id }}"
      state: "{{ state }}"
      cidr: "{{ subnet_cidr3 }}"
      map_public: yes
      resource_tags:
        Name: "{{ subnet_name3 }}"
    register: sn3
  
  - name: Set subnet3 in variable
    set_stats:
      data:
        subnet3: "{{ sn3 }}"

  - name: define route for subnet 2
    ec2_vpc_route_table:
      region: "{{ region }}"
      vpc_id: "{{ vpc_id }}"
      subnets:
        - "{{ subnet_cidr2 }}"
      tags:
        Name: "{{ route_name }}"
    register: route2

  - name: define route for subnet 3
    ec2_vpc_route_table:
      region: "{{ region }}"
      vpc_id: "{{ vpc_id }}"
      subnets:
        - "{{ subnet_cidr3 }}"
      tags:
        Name: "{{ route_name }} HP"
    register: rout3

  - name: Set route3 in variable
    set_stats:
      data:
        route3: "{{ rout3 }}"

  - name: Create Honey Pot Security Group
    ec2_group:
      name: SGHoneyPot
      description: DMZ Security Group
      vpc_id: "{{ vpc_id }}"
      region: "{{ region }}"
      rules:
        - rule_desc: Allow all inbound traffic
          proto: -1
          ports: -1
          cidr_ip: "{{ destinationCidrBlock }}"
    register: security_group_hp
